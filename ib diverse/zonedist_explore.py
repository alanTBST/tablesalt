# -*- coding: utf-8 -*-
"""
Created on Thu Feb  4 10:24:59 2021

@author: ib_hansen

Explotre the zone distance graphs from the DOT information and 
based on gtfs and zoneshapes. 

The distance informations from DOT are retrieved from pickle file 
generated by get_Zonerel_call.py 

The distance information based on gtfs and zoneshapes are generated 
by tablesalt.topology.tools.Edgemaker 


"""

import pandas as pd
# import modin.pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import json 
import fnmatch
import networkx as nx 

from tablesalt.topology import tools


with open('ZoneDistanceDict.pc', 'rb') as handle:
   ZoneDIstanceDict = pickle.load(handle)
#%%
ZonesToDf = [[v['StartZone'],v['DestinationZone'], v['DirectDistance'],v['PaidZones'],v['ValidityZones'],v['DirectDistance']-v['PaidZones']] for k,v in ZoneDIstanceDict.items()]
ZonesDf = pd.DataFrame(ZonesToDf,columns= ['StartZone','DestinationZone','DirectDistance','PaidZones','ValidityZones','DiffZones'])

FromToDic = {(v['StartZone'],v['DestinationZone']) : v for k,v in ZoneDIstanceDict.items()}

#%% An example
from1001 = ZonesDf.query('StartZone == 1001')
to1001   = ZonesDf.query('DestinationZone == 1001')
def getfromto(zone):
    return  {f'From {zone}': ZonesDf.query('StartZone == @zone'),f'To {zone}': ZonesDf.query('DestinationZone == @zone')}
xx = getfromto('1090')  
#%%
FromToDic[(1090,1012)]
           
#%% Neighbour zones
NeighbourZones = ZonesDf.query('DirectDistance == 2') 
zonegraph = nx.from_pandas_edgelist(NeighbourZones,source='StartZone',target='DestinationZone')
zonegraph.add_nodes_from([1226, 1278])

adjencydf = nx.to_pandas_adjacency(zonegraph)
nx.is_connected(zonegraph)
len(list(nx.connected_components(zonegraph)))

## Try from tablesalt.tools.Edgemaker
maker  = tools.EdgeMaker()
edges = maker.make_edges()
edges.keys()
edges['idx']      # zone -> node
edges['rev_idx']  # node -> zone 
edges['adj_array'].shape

ZonegraphFromEdges  = nx.from_numpy_array(edges['adj_array'])


adjencydfEdges = nx.to_pandas_adjacency(ZonegraphFromEdges).rename(columns=edges['rev_idx'],index=edges['rev_idx'])
adjencyDiff = adjencydf - adjencydfEdges

InDotNotInEdges = adjencyDiff==1
InDotNotInEdgesDf = adjencyDiff.loc[InDotNotInEdges.any(axis = 0),InDotNotInEdges.any(axis = 1)]
InEdgesNotInDot = adjencyDiff==-1
InEdgesNotInDotDf = adjencyDiff.loc[InEdgesNotInDot.any(axis = 0),InEdgesNotInDot.any(axis = 1)]
